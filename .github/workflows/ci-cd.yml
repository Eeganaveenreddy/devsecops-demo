name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - 'kubernetes/deployment.yaml' 

jobs:
  test:
    name: Unit-Testing
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v4

      - name: setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  lint:
    name: Static code analysis
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v4

      - name: setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: checkout the code
        uses: actions/checkout@v4

      - name: setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker build and push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE: ${{ github.repository }} # <owner>/<repo-name> => naveenega/devsecops-demo
    steps:
      - name: checkout the code
        uses: actions/checkout@v4

      - name: Download the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login into Github container registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.TOKEN}}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{env.REGISTRY}}/${{env.IMAGE}}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          # tags: ${{steps.meta.outputs.tags}}
          tags: devsecops-demo:sha-${{ github.sha }}
          labels: ${{steps.meta.outputs.labels}}
          load: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: devsecops-demo:sha-${{github.sha}}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

      - name: Build docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{steps.meta.outputs.labels}}

      - name: Set image tag output
        id: set_output
        run: echo "Image tag=$(echo ${{github.sha}} | cut -c1-7)" >> $GITHUB_OUTPUT

    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}

  update-k8s:
    name: Update k8s deployment file
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{secrets.TOKEN}}

      - name: Setup git config
        run: |
          git config user.name "eganaveen"
          git config user.email "enreddy619@gmail.com"

      - name: Update k8s deployment file
        env:
          IMAGE_TAG: sha-${{github.sha}}
          GITHUB_REPOsitory: ${{github.repository}}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"

          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml

          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml

      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{needs.docker.outputs.image_tag}} [skip ci]" || echo "No changes to commit"
          git push

        
    
